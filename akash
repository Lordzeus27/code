import numpy as np

# Data preparation
X = np.array([[2, 9], [1, 5], [3, 6]], dtype=float) / np.amax(np.array([[2, 9], [1, 5], [3, 6]]), axis=0)
y = np.array([[92], [86], [89]], dtype=float) / 100

# Sigmoid functions
sigmoid = lambda x: 1 / (1 + np.exp(-x))
deriv_sigmoid = lambda x: x * (1 - x)

# Initialize weights
wh = np.random.rand(2, 3)
bh = np.random.rand(1, 3)
wout = np.random.rand(3, 1)
bout = np.random.rand(1, 1)

# Training
for _ in range(7000):
    hlayer = sigmoid(np.dot(X, wh) + bh)
    output = sigmoid(np.dot(hlayer, wout) + bout)
    error = y - output
    wout += 0.1 * np.dot(hlayer.T, error * deriv_sigmoid(output))
    wh += 0.1 * np.dot(X.T, (error.dot(wout.T) * deriv_sigmoid(hlayer)))

# Results
print("Input:\n", X)
print("Actual Output:\n", y)
print("Predicted Output:\n", output)